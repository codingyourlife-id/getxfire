rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users
    // Security Rules for Users Colection
    match /users/{uid} {
      // If user logged in, he can create his own document.
      allow create: if login() && request.auth.uid == uid;

      // Read if it's login user's document.
      // Admin can read, too.
      allow read: if request.auth.uid == uid || admin();

      // Update login user's document.
      // Admin cannot update.
      // No body can update `isAdmin` which tells who's admin.
      allow update: if request.auth.uid == uid && notUpdating('isAdmin');

      // Nobody can delete.
      allow delete: if false;
    }


    // User public information documents
    //
    match /meta/user/public/{uid} {
    	allow read: if true;
      allow write: if request.auth.uid == uid;
    }

    // User tokens document.
    // It's open to public.
    match /meta/user/token/{uid} {
    	allow read: if true;
      allow write: if request.auth.uid == uid;
    }


    // Check if user logged in.
    //
    // Anonymous is considered as not logged in.
    function login() {
      return request.auth.uid != null
        && ( request.auth.token.firebase.sign_in_provider != 'anonymous' );
    }

    // Returns the data of the `field` is in the resource.request.data
    function req(field) {
      return request.resource.data[field];
    }
    // Returns the data of the `field` is in the resource.data
    function res(field) {
      return resource.data[field];
    }

    // Check if the field is not updated.
    function notUpdating(field) {
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field];
    }

    // Check if the input document property has a field
    // function requestHas(field) {
    //   return field in request.resource.data;
    // }


    // Check if the exists document is the login user's document.
    function myDocument() {
      return resource.data.uid == request.auth.uid;
    }

    // Check if the document will be my document after writing.
    function toBeMyDocument() {
      return request.resource.data.uid == request.auth.uid;
    }

    // See if the login user is admin.
    function admin() {
      return login() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // See if the category exists.
    // It check the incoming `category` from client.
    function categoryExist() {
      return exists(/databases/$(database)/documents/categories/$(request.resource.data.category));
    }

    // Check if only the specified fields are updated.
    //
    // Example) onlyUpdating(['like', 'dislike']);
    function onlyUpdating(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }


    // Check if all the fields are exist in request.
    //
    // If request does not contain any of the fields, it fails.
    function hasAll(fields) {
      return (request.resource.data.keys().hasAll(fields));
    }
  }
}